
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left+-left*/ASSIGN ELSE EQ GE GT IDENTIFIER IF LE LT NE NUMBERprogram : statement\n| program statementexpression : expression GT expression\n| expression LT expression\n| expression GE expression\n| expression LE expression\n| expression EQ expression\n| expression NE expressionstatement : IDENTIFIER ASSIGN expressionexpression : expression '+' expression\n| expression '-' expression\n| expression '*' expression\n| expression '/' expressionstatement : IF '(' expression ')' '{' program '}'\n| IF '(' expression ')' '{' program '}' ELSE '{' program '}'expression : NUMBERexpression : IDENTIFIER"
    
_lr_action_items = {'IDENTIFIER':([0,1,2,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,],[3,3,-1,-2,8,8,-17,-9,-16,8,8,8,8,8,8,8,8,8,8,-3,-4,-5,-6,-7,-8,-10,-11,-12,-13,3,3,-14,3,3,-15,]),'IF':([0,1,2,5,8,9,10,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,],[4,4,-1,-2,-17,-9,-16,-3,-4,-5,-6,-7,-8,-10,-11,-12,-13,4,4,-14,4,4,-15,]),'$end':([1,2,5,8,9,10,23,24,25,26,27,28,29,30,31,32,35,39,],[0,-1,-2,-17,-9,-16,-3,-4,-5,-6,-7,-8,-10,-11,-12,-13,-14,-15,]),'}':([2,5,8,9,10,23,24,25,26,27,28,29,30,31,32,34,35,38,39,],[-1,-2,-17,-9,-16,-3,-4,-5,-6,-7,-8,-10,-11,-12,-13,35,-14,39,-15,]),'ASSIGN':([3,],[6,]),'(':([4,],[7,]),'NUMBER':([6,7,12,13,14,15,16,17,18,19,20,21,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'GT':([8,9,10,11,23,24,25,26,27,28,29,30,31,32,],[-17,12,-16,12,12,12,12,12,12,12,-10,-11,-12,-13,]),'LT':([8,9,10,11,23,24,25,26,27,28,29,30,31,32,],[-17,13,-16,13,13,13,13,13,13,13,-10,-11,-12,-13,]),'GE':([8,9,10,11,23,24,25,26,27,28,29,30,31,32,],[-17,14,-16,14,14,14,14,14,14,14,-10,-11,-12,-13,]),'LE':([8,9,10,11,23,24,25,26,27,28,29,30,31,32,],[-17,15,-16,15,15,15,15,15,15,15,-10,-11,-12,-13,]),'EQ':([8,9,10,11,23,24,25,26,27,28,29,30,31,32,],[-17,16,-16,16,16,16,16,16,16,16,-10,-11,-12,-13,]),'NE':([8,9,10,11,23,24,25,26,27,28,29,30,31,32,],[-17,17,-16,17,17,17,17,17,17,17,-10,-11,-12,-13,]),'+':([8,9,10,11,23,24,25,26,27,28,29,30,31,32,],[-17,18,-16,18,18,18,18,18,18,18,-10,-11,-12,-13,]),'-':([8,9,10,11,23,24,25,26,27,28,29,30,31,32,],[-17,19,-16,19,19,19,19,19,19,19,-10,-11,-12,-13,]),'*':([8,9,10,11,23,24,25,26,27,28,29,30,31,32,],[-17,20,-16,20,20,20,20,20,20,20,20,20,-12,-13,]),'/':([8,9,10,11,23,24,25,26,27,28,29,30,31,32,],[-17,21,-16,21,21,21,21,21,21,21,21,21,-12,-13,]),')':([8,10,11,23,24,25,26,27,28,29,30,31,32,],[-17,-16,22,-3,-4,-5,-6,-7,-8,-10,-11,-12,-13,]),'{':([22,36,],[33,37,]),'ELSE':([35,],[36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,33,37,],[1,34,38,]),'statement':([0,1,33,34,37,38,],[2,5,2,5,2,5,]),'expression':([6,7,12,13,14,15,16,17,18,19,20,21,],[9,11,23,24,25,26,27,28,29,30,31,32,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement','program',1,'p_program_statements','LSC.py',65),
  ('program -> program statement','program',2,'p_program_statements','LSC.py',66),
  ('expression -> expression GT expression','expression',3,'p_expression_relop','LSC.py',73),
  ('expression -> expression LT expression','expression',3,'p_expression_relop','LSC.py',74),
  ('expression -> expression GE expression','expression',3,'p_expression_relop','LSC.py',75),
  ('expression -> expression LE expression','expression',3,'p_expression_relop','LSC.py',76),
  ('expression -> expression EQ expression','expression',3,'p_expression_relop','LSC.py',77),
  ('expression -> expression NE expression','expression',3,'p_expression_relop','LSC.py',78),
  ('statement -> IDENTIFIER ASSIGN expression','statement',3,'p_statement_assign','LSC.py',94),
  ('expression -> expression + expression','expression',3,'p_expression_binop','LSC.py',101),
  ('expression -> expression - expression','expression',3,'p_expression_binop','LSC.py',102),
  ('expression -> expression * expression','expression',3,'p_expression_binop','LSC.py',103),
  ('expression -> expression / expression','expression',3,'p_expression_binop','LSC.py',104),
  ('statement -> IF ( expression ) { program }','statement',7,'p_if_else_statement','LSC.py',115),
  ('statement -> IF ( expression ) { program } ELSE { program }','statement',11,'p_if_else_statement','LSC.py',116),
  ('expression -> NUMBER','expression',1,'p_expression_number','LSC.py',130),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','LSC.py',134),
]
