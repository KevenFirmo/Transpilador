Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> program statement
Rule 3     expression -> expression GT expression
Rule 4     expression -> expression LT expression
Rule 5     expression -> expression GE expression
Rule 6     expression -> expression LE expression
Rule 7     expression -> expression EQ expression
Rule 8     expression -> expression NE expression
Rule 9     statement -> IDENTIFIER ASSIGN expression
Rule 10    expression -> expression + expression
Rule 11    expression -> expression - expression
Rule 12    expression -> expression * expression
Rule 13    expression -> expression / expression
Rule 14    statement -> IF ( expression ) { program }
Rule 15    statement -> IF ( expression ) { program } ELSE { program }
Rule 16    expression -> NUMBER
Rule 17    expression -> IDENTIFIER

Terminals, with rules where they appear

(                    : 14 15
)                    : 14 15
*                    : 12
+                    : 10
-                    : 11
/                    : 13
ASSIGN               : 9
ELSE                 : 15
EQ                   : 7
GE                   : 5
GT                   : 3
IDENTIFIER           : 9 17
IF                   : 14 15
LE                   : 6
LT                   : 4
NE                   : 8
NUMBER               : 16
error                : 
{                    : 14 15 15
}                    : 14 15 15

Nonterminals, with rules where they appear

expression           : 3 3 4 4 5 5 6 6 7 7 8 8 9 10 10 11 11 12 12 13 13 14 15
program              : 2 14 15 15 0
statement            : 1 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . program statement
    (9) statement -> . IDENTIFIER ASSIGN expression
    (14) statement -> . IF ( expression ) { program }
    (15) statement -> . IF ( expression ) { program } ELSE { program }

    IDENTIFIER      shift and go to state 3
    IF              shift and go to state 4

    program                        shift and go to state 1
    statement                      shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . statement
    (9) statement -> . IDENTIFIER ASSIGN expression
    (14) statement -> . IF ( expression ) { program }
    (15) statement -> . IF ( expression ) { program } ELSE { program }

    IDENTIFIER      shift and go to state 3
    IF              shift and go to state 4

    statement                      shift and go to state 5

state 2

    (1) program -> statement .

    IDENTIFIER      reduce using rule 1 (program -> statement .)
    IF              reduce using rule 1 (program -> statement .)
    $end            reduce using rule 1 (program -> statement .)
    }               reduce using rule 1 (program -> statement .)


state 3

    (9) statement -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 6


state 4

    (14) statement -> IF . ( expression ) { program }
    (15) statement -> IF . ( expression ) { program } ELSE { program }

    (               shift and go to state 7


state 5

    (2) program -> program statement .

    IDENTIFIER      reduce using rule 2 (program -> program statement .)
    IF              reduce using rule 2 (program -> program statement .)
    $end            reduce using rule 2 (program -> program statement .)
    }               reduce using rule 2 (program -> program statement .)


state 6

    (9) statement -> IDENTIFIER ASSIGN . expression
    (3) expression -> . expression GT expression
    (4) expression -> . expression LT expression
    (5) expression -> . expression GE expression
    (6) expression -> . expression LE expression
    (7) expression -> . expression EQ expression
    (8) expression -> . expression NE expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 8

    expression                     shift and go to state 9

state 7

    (14) statement -> IF ( . expression ) { program }
    (15) statement -> IF ( . expression ) { program } ELSE { program }
    (3) expression -> . expression GT expression
    (4) expression -> . expression LT expression
    (5) expression -> . expression GE expression
    (6) expression -> . expression LE expression
    (7) expression -> . expression EQ expression
    (8) expression -> . expression NE expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 8

    expression                     shift and go to state 11

state 8

    (17) expression -> IDENTIFIER .

    GT              reduce using rule 17 (expression -> IDENTIFIER .)
    LT              reduce using rule 17 (expression -> IDENTIFIER .)
    GE              reduce using rule 17 (expression -> IDENTIFIER .)
    LE              reduce using rule 17 (expression -> IDENTIFIER .)
    EQ              reduce using rule 17 (expression -> IDENTIFIER .)
    NE              reduce using rule 17 (expression -> IDENTIFIER .)
    +               reduce using rule 17 (expression -> IDENTIFIER .)
    -               reduce using rule 17 (expression -> IDENTIFIER .)
    *               reduce using rule 17 (expression -> IDENTIFIER .)
    /               reduce using rule 17 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 17 (expression -> IDENTIFIER .)
    IF              reduce using rule 17 (expression -> IDENTIFIER .)
    $end            reduce using rule 17 (expression -> IDENTIFIER .)
    }               reduce using rule 17 (expression -> IDENTIFIER .)
    )               reduce using rule 17 (expression -> IDENTIFIER .)


state 9

    (9) statement -> IDENTIFIER ASSIGN expression .
    (3) expression -> expression . GT expression
    (4) expression -> expression . LT expression
    (5) expression -> expression . GE expression
    (6) expression -> expression . LE expression
    (7) expression -> expression . EQ expression
    (8) expression -> expression . NE expression
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    IDENTIFIER      reduce using rule 9 (statement -> IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 9 (statement -> IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 9 (statement -> IDENTIFIER ASSIGN expression .)
    }               reduce using rule 9 (statement -> IDENTIFIER ASSIGN expression .)
    GT              shift and go to state 12
    LT              shift and go to state 13
    GE              shift and go to state 14
    LE              shift and go to state 15
    EQ              shift and go to state 16
    NE              shift and go to state 17
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21


state 10

    (16) expression -> NUMBER .

    GT              reduce using rule 16 (expression -> NUMBER .)
    LT              reduce using rule 16 (expression -> NUMBER .)
    GE              reduce using rule 16 (expression -> NUMBER .)
    LE              reduce using rule 16 (expression -> NUMBER .)
    EQ              reduce using rule 16 (expression -> NUMBER .)
    NE              reduce using rule 16 (expression -> NUMBER .)
    +               reduce using rule 16 (expression -> NUMBER .)
    -               reduce using rule 16 (expression -> NUMBER .)
    *               reduce using rule 16 (expression -> NUMBER .)
    /               reduce using rule 16 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 16 (expression -> NUMBER .)
    IF              reduce using rule 16 (expression -> NUMBER .)
    $end            reduce using rule 16 (expression -> NUMBER .)
    }               reduce using rule 16 (expression -> NUMBER .)
    )               reduce using rule 16 (expression -> NUMBER .)


state 11

    (14) statement -> IF ( expression . ) { program }
    (15) statement -> IF ( expression . ) { program } ELSE { program }
    (3) expression -> expression . GT expression
    (4) expression -> expression . LT expression
    (5) expression -> expression . GE expression
    (6) expression -> expression . LE expression
    (7) expression -> expression . EQ expression
    (8) expression -> expression . NE expression
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    )               shift and go to state 22
    GT              shift and go to state 12
    LT              shift and go to state 13
    GE              shift and go to state 14
    LE              shift and go to state 15
    EQ              shift and go to state 16
    NE              shift and go to state 17
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21


state 12

    (3) expression -> expression GT . expression
    (3) expression -> . expression GT expression
    (4) expression -> . expression LT expression
    (5) expression -> . expression GE expression
    (6) expression -> . expression LE expression
    (7) expression -> . expression EQ expression
    (8) expression -> . expression NE expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 8

    expression                     shift and go to state 23

state 13

    (4) expression -> expression LT . expression
    (3) expression -> . expression GT expression
    (4) expression -> . expression LT expression
    (5) expression -> . expression GE expression
    (6) expression -> . expression LE expression
    (7) expression -> . expression EQ expression
    (8) expression -> . expression NE expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 8

    expression                     shift and go to state 24

state 14

    (5) expression -> expression GE . expression
    (3) expression -> . expression GT expression
    (4) expression -> . expression LT expression
    (5) expression -> . expression GE expression
    (6) expression -> . expression LE expression
    (7) expression -> . expression EQ expression
    (8) expression -> . expression NE expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 8

    expression                     shift and go to state 25

state 15

    (6) expression -> expression LE . expression
    (3) expression -> . expression GT expression
    (4) expression -> . expression LT expression
    (5) expression -> . expression GE expression
    (6) expression -> . expression LE expression
    (7) expression -> . expression EQ expression
    (8) expression -> . expression NE expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 8

    expression                     shift and go to state 26

state 16

    (7) expression -> expression EQ . expression
    (3) expression -> . expression GT expression
    (4) expression -> . expression LT expression
    (5) expression -> . expression GE expression
    (6) expression -> . expression LE expression
    (7) expression -> . expression EQ expression
    (8) expression -> . expression NE expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 8

    expression                     shift and go to state 27

state 17

    (8) expression -> expression NE . expression
    (3) expression -> . expression GT expression
    (4) expression -> . expression LT expression
    (5) expression -> . expression GE expression
    (6) expression -> . expression LE expression
    (7) expression -> . expression EQ expression
    (8) expression -> . expression NE expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 8

    expression                     shift and go to state 28

state 18

    (10) expression -> expression + . expression
    (3) expression -> . expression GT expression
    (4) expression -> . expression LT expression
    (5) expression -> . expression GE expression
    (6) expression -> . expression LE expression
    (7) expression -> . expression EQ expression
    (8) expression -> . expression NE expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 8

    expression                     shift and go to state 29

state 19

    (11) expression -> expression - . expression
    (3) expression -> . expression GT expression
    (4) expression -> . expression LT expression
    (5) expression -> . expression GE expression
    (6) expression -> . expression LE expression
    (7) expression -> . expression EQ expression
    (8) expression -> . expression NE expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 8

    expression                     shift and go to state 30

state 20

    (12) expression -> expression * . expression
    (3) expression -> . expression GT expression
    (4) expression -> . expression LT expression
    (5) expression -> . expression GE expression
    (6) expression -> . expression LE expression
    (7) expression -> . expression EQ expression
    (8) expression -> . expression NE expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 8

    expression                     shift and go to state 31

state 21

    (13) expression -> expression / . expression
    (3) expression -> . expression GT expression
    (4) expression -> . expression LT expression
    (5) expression -> . expression GE expression
    (6) expression -> . expression LE expression
    (7) expression -> . expression EQ expression
    (8) expression -> . expression NE expression
    (10) expression -> . expression + expression
    (11) expression -> . expression - expression
    (12) expression -> . expression * expression
    (13) expression -> . expression / expression
    (16) expression -> . NUMBER
    (17) expression -> . IDENTIFIER

    NUMBER          shift and go to state 10
    IDENTIFIER      shift and go to state 8

    expression                     shift and go to state 32

state 22

    (14) statement -> IF ( expression ) . { program }
    (15) statement -> IF ( expression ) . { program } ELSE { program }

    {               shift and go to state 33


state 23

    (3) expression -> expression GT expression .
    (3) expression -> expression . GT expression
    (4) expression -> expression . LT expression
    (5) expression -> expression . GE expression
    (6) expression -> expression . LE expression
    (7) expression -> expression . EQ expression
    (8) expression -> expression . NE expression
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    IDENTIFIER      reduce using rule 3 (expression -> expression GT expression .)
    IF              reduce using rule 3 (expression -> expression GT expression .)
    $end            reduce using rule 3 (expression -> expression GT expression .)
    }               reduce using rule 3 (expression -> expression GT expression .)
    )               reduce using rule 3 (expression -> expression GT expression .)
    GT              shift and go to state 12
    LT              shift and go to state 13
    GE              shift and go to state 14
    LE              shift and go to state 15
    EQ              shift and go to state 16
    NE              shift and go to state 17
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21

  ! GT              [ reduce using rule 3 (expression -> expression GT expression .) ]
  ! LT              [ reduce using rule 3 (expression -> expression GT expression .) ]
  ! GE              [ reduce using rule 3 (expression -> expression GT expression .) ]
  ! LE              [ reduce using rule 3 (expression -> expression GT expression .) ]
  ! EQ              [ reduce using rule 3 (expression -> expression GT expression .) ]
  ! NE              [ reduce using rule 3 (expression -> expression GT expression .) ]
  ! +               [ reduce using rule 3 (expression -> expression GT expression .) ]
  ! -               [ reduce using rule 3 (expression -> expression GT expression .) ]
  ! *               [ reduce using rule 3 (expression -> expression GT expression .) ]
  ! /               [ reduce using rule 3 (expression -> expression GT expression .) ]


state 24

    (4) expression -> expression LT expression .
    (3) expression -> expression . GT expression
    (4) expression -> expression . LT expression
    (5) expression -> expression . GE expression
    (6) expression -> expression . LE expression
    (7) expression -> expression . EQ expression
    (8) expression -> expression . NE expression
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    IDENTIFIER      reduce using rule 4 (expression -> expression LT expression .)
    IF              reduce using rule 4 (expression -> expression LT expression .)
    $end            reduce using rule 4 (expression -> expression LT expression .)
    }               reduce using rule 4 (expression -> expression LT expression .)
    )               reduce using rule 4 (expression -> expression LT expression .)
    GT              shift and go to state 12
    LT              shift and go to state 13
    GE              shift and go to state 14
    LE              shift and go to state 15
    EQ              shift and go to state 16
    NE              shift and go to state 17
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21

  ! GT              [ reduce using rule 4 (expression -> expression LT expression .) ]
  ! LT              [ reduce using rule 4 (expression -> expression LT expression .) ]
  ! GE              [ reduce using rule 4 (expression -> expression LT expression .) ]
  ! LE              [ reduce using rule 4 (expression -> expression LT expression .) ]
  ! EQ              [ reduce using rule 4 (expression -> expression LT expression .) ]
  ! NE              [ reduce using rule 4 (expression -> expression LT expression .) ]
  ! +               [ reduce using rule 4 (expression -> expression LT expression .) ]
  ! -               [ reduce using rule 4 (expression -> expression LT expression .) ]
  ! *               [ reduce using rule 4 (expression -> expression LT expression .) ]
  ! /               [ reduce using rule 4 (expression -> expression LT expression .) ]


state 25

    (5) expression -> expression GE expression .
    (3) expression -> expression . GT expression
    (4) expression -> expression . LT expression
    (5) expression -> expression . GE expression
    (6) expression -> expression . LE expression
    (7) expression -> expression . EQ expression
    (8) expression -> expression . NE expression
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    IDENTIFIER      reduce using rule 5 (expression -> expression GE expression .)
    IF              reduce using rule 5 (expression -> expression GE expression .)
    $end            reduce using rule 5 (expression -> expression GE expression .)
    }               reduce using rule 5 (expression -> expression GE expression .)
    )               reduce using rule 5 (expression -> expression GE expression .)
    GT              shift and go to state 12
    LT              shift and go to state 13
    GE              shift and go to state 14
    LE              shift and go to state 15
    EQ              shift and go to state 16
    NE              shift and go to state 17
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21

  ! GT              [ reduce using rule 5 (expression -> expression GE expression .) ]
  ! LT              [ reduce using rule 5 (expression -> expression GE expression .) ]
  ! GE              [ reduce using rule 5 (expression -> expression GE expression .) ]
  ! LE              [ reduce using rule 5 (expression -> expression GE expression .) ]
  ! EQ              [ reduce using rule 5 (expression -> expression GE expression .) ]
  ! NE              [ reduce using rule 5 (expression -> expression GE expression .) ]
  ! +               [ reduce using rule 5 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 5 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 5 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 5 (expression -> expression GE expression .) ]


state 26

    (6) expression -> expression LE expression .
    (3) expression -> expression . GT expression
    (4) expression -> expression . LT expression
    (5) expression -> expression . GE expression
    (6) expression -> expression . LE expression
    (7) expression -> expression . EQ expression
    (8) expression -> expression . NE expression
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    IDENTIFIER      reduce using rule 6 (expression -> expression LE expression .)
    IF              reduce using rule 6 (expression -> expression LE expression .)
    $end            reduce using rule 6 (expression -> expression LE expression .)
    }               reduce using rule 6 (expression -> expression LE expression .)
    )               reduce using rule 6 (expression -> expression LE expression .)
    GT              shift and go to state 12
    LT              shift and go to state 13
    GE              shift and go to state 14
    LE              shift and go to state 15
    EQ              shift and go to state 16
    NE              shift and go to state 17
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21

  ! GT              [ reduce using rule 6 (expression -> expression LE expression .) ]
  ! LT              [ reduce using rule 6 (expression -> expression LE expression .) ]
  ! GE              [ reduce using rule 6 (expression -> expression LE expression .) ]
  ! LE              [ reduce using rule 6 (expression -> expression LE expression .) ]
  ! EQ              [ reduce using rule 6 (expression -> expression LE expression .) ]
  ! NE              [ reduce using rule 6 (expression -> expression LE expression .) ]
  ! +               [ reduce using rule 6 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 6 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 6 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 6 (expression -> expression LE expression .) ]


state 27

    (7) expression -> expression EQ expression .
    (3) expression -> expression . GT expression
    (4) expression -> expression . LT expression
    (5) expression -> expression . GE expression
    (6) expression -> expression . LE expression
    (7) expression -> expression . EQ expression
    (8) expression -> expression . NE expression
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    IDENTIFIER      reduce using rule 7 (expression -> expression EQ expression .)
    IF              reduce using rule 7 (expression -> expression EQ expression .)
    $end            reduce using rule 7 (expression -> expression EQ expression .)
    }               reduce using rule 7 (expression -> expression EQ expression .)
    )               reduce using rule 7 (expression -> expression EQ expression .)
    GT              shift and go to state 12
    LT              shift and go to state 13
    GE              shift and go to state 14
    LE              shift and go to state 15
    EQ              shift and go to state 16
    NE              shift and go to state 17
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21

  ! GT              [ reduce using rule 7 (expression -> expression EQ expression .) ]
  ! LT              [ reduce using rule 7 (expression -> expression EQ expression .) ]
  ! GE              [ reduce using rule 7 (expression -> expression EQ expression .) ]
  ! LE              [ reduce using rule 7 (expression -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 7 (expression -> expression EQ expression .) ]
  ! NE              [ reduce using rule 7 (expression -> expression EQ expression .) ]
  ! +               [ reduce using rule 7 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 7 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 7 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 7 (expression -> expression EQ expression .) ]


state 28

    (8) expression -> expression NE expression .
    (3) expression -> expression . GT expression
    (4) expression -> expression . LT expression
    (5) expression -> expression . GE expression
    (6) expression -> expression . LE expression
    (7) expression -> expression . EQ expression
    (8) expression -> expression . NE expression
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    IDENTIFIER      reduce using rule 8 (expression -> expression NE expression .)
    IF              reduce using rule 8 (expression -> expression NE expression .)
    $end            reduce using rule 8 (expression -> expression NE expression .)
    }               reduce using rule 8 (expression -> expression NE expression .)
    )               reduce using rule 8 (expression -> expression NE expression .)
    GT              shift and go to state 12
    LT              shift and go to state 13
    GE              shift and go to state 14
    LE              shift and go to state 15
    EQ              shift and go to state 16
    NE              shift and go to state 17
    +               shift and go to state 18
    -               shift and go to state 19
    *               shift and go to state 20
    /               shift and go to state 21

  ! GT              [ reduce using rule 8 (expression -> expression NE expression .) ]
  ! LT              [ reduce using rule 8 (expression -> expression NE expression .) ]
  ! GE              [ reduce using rule 8 (expression -> expression NE expression .) ]
  ! LE              [ reduce using rule 8 (expression -> expression NE expression .) ]
  ! EQ              [ reduce using rule 8 (expression -> expression NE expression .) ]
  ! NE              [ reduce using rule 8 (expression -> expression NE expression .) ]
  ! +               [ reduce using rule 8 (expression -> expression NE expression .) ]
  ! -               [ reduce using rule 8 (expression -> expression NE expression .) ]
  ! *               [ reduce using rule 8 (expression -> expression NE expression .) ]
  ! /               [ reduce using rule 8 (expression -> expression NE expression .) ]


state 29

    (10) expression -> expression + expression .
    (3) expression -> expression . GT expression
    (4) expression -> expression . LT expression
    (5) expression -> expression . GE expression
    (6) expression -> expression . LE expression
    (7) expression -> expression . EQ expression
    (8) expression -> expression . NE expression
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    GT              reduce using rule 10 (expression -> expression + expression .)
    LT              reduce using rule 10 (expression -> expression + expression .)
    GE              reduce using rule 10 (expression -> expression + expression .)
    LE              reduce using rule 10 (expression -> expression + expression .)
    EQ              reduce using rule 10 (expression -> expression + expression .)
    NE              reduce using rule 10 (expression -> expression + expression .)
    +               reduce using rule 10 (expression -> expression + expression .)
    -               reduce using rule 10 (expression -> expression + expression .)
    IDENTIFIER      reduce using rule 10 (expression -> expression + expression .)
    IF              reduce using rule 10 (expression -> expression + expression .)
    $end            reduce using rule 10 (expression -> expression + expression .)
    }               reduce using rule 10 (expression -> expression + expression .)
    )               reduce using rule 10 (expression -> expression + expression .)
    *               shift and go to state 20
    /               shift and go to state 21

  ! *               [ reduce using rule 10 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 10 (expression -> expression + expression .) ]
  ! GT              [ shift and go to state 12 ]
  ! LT              [ shift and go to state 13 ]
  ! GE              [ shift and go to state 14 ]
  ! LE              [ shift and go to state 15 ]
  ! EQ              [ shift and go to state 16 ]
  ! NE              [ shift and go to state 17 ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]


state 30

    (11) expression -> expression - expression .
    (3) expression -> expression . GT expression
    (4) expression -> expression . LT expression
    (5) expression -> expression . GE expression
    (6) expression -> expression . LE expression
    (7) expression -> expression . EQ expression
    (8) expression -> expression . NE expression
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    GT              reduce using rule 11 (expression -> expression - expression .)
    LT              reduce using rule 11 (expression -> expression - expression .)
    GE              reduce using rule 11 (expression -> expression - expression .)
    LE              reduce using rule 11 (expression -> expression - expression .)
    EQ              reduce using rule 11 (expression -> expression - expression .)
    NE              reduce using rule 11 (expression -> expression - expression .)
    +               reduce using rule 11 (expression -> expression - expression .)
    -               reduce using rule 11 (expression -> expression - expression .)
    IDENTIFIER      reduce using rule 11 (expression -> expression - expression .)
    IF              reduce using rule 11 (expression -> expression - expression .)
    $end            reduce using rule 11 (expression -> expression - expression .)
    }               reduce using rule 11 (expression -> expression - expression .)
    )               reduce using rule 11 (expression -> expression - expression .)
    *               shift and go to state 20
    /               shift and go to state 21

  ! *               [ reduce using rule 11 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression - expression .) ]
  ! GT              [ shift and go to state 12 ]
  ! LT              [ shift and go to state 13 ]
  ! GE              [ shift and go to state 14 ]
  ! LE              [ shift and go to state 15 ]
  ! EQ              [ shift and go to state 16 ]
  ! NE              [ shift and go to state 17 ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]


state 31

    (12) expression -> expression * expression .
    (3) expression -> expression . GT expression
    (4) expression -> expression . LT expression
    (5) expression -> expression . GE expression
    (6) expression -> expression . LE expression
    (7) expression -> expression . EQ expression
    (8) expression -> expression . NE expression
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    GT              reduce using rule 12 (expression -> expression * expression .)
    LT              reduce using rule 12 (expression -> expression * expression .)
    GE              reduce using rule 12 (expression -> expression * expression .)
    LE              reduce using rule 12 (expression -> expression * expression .)
    EQ              reduce using rule 12 (expression -> expression * expression .)
    NE              reduce using rule 12 (expression -> expression * expression .)
    +               reduce using rule 12 (expression -> expression * expression .)
    -               reduce using rule 12 (expression -> expression * expression .)
    *               reduce using rule 12 (expression -> expression * expression .)
    /               reduce using rule 12 (expression -> expression * expression .)
    IDENTIFIER      reduce using rule 12 (expression -> expression * expression .)
    IF              reduce using rule 12 (expression -> expression * expression .)
    $end            reduce using rule 12 (expression -> expression * expression .)
    }               reduce using rule 12 (expression -> expression * expression .)
    )               reduce using rule 12 (expression -> expression * expression .)

  ! GT              [ shift and go to state 12 ]
  ! LT              [ shift and go to state 13 ]
  ! GE              [ shift and go to state 14 ]
  ! LE              [ shift and go to state 15 ]
  ! EQ              [ shift and go to state 16 ]
  ! NE              [ shift and go to state 17 ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! *               [ shift and go to state 20 ]
  ! /               [ shift and go to state 21 ]


state 32

    (13) expression -> expression / expression .
    (3) expression -> expression . GT expression
    (4) expression -> expression . LT expression
    (5) expression -> expression . GE expression
    (6) expression -> expression . LE expression
    (7) expression -> expression . EQ expression
    (8) expression -> expression . NE expression
    (10) expression -> expression . + expression
    (11) expression -> expression . - expression
    (12) expression -> expression . * expression
    (13) expression -> expression . / expression

    GT              reduce using rule 13 (expression -> expression / expression .)
    LT              reduce using rule 13 (expression -> expression / expression .)
    GE              reduce using rule 13 (expression -> expression / expression .)
    LE              reduce using rule 13 (expression -> expression / expression .)
    EQ              reduce using rule 13 (expression -> expression / expression .)
    NE              reduce using rule 13 (expression -> expression / expression .)
    +               reduce using rule 13 (expression -> expression / expression .)
    -               reduce using rule 13 (expression -> expression / expression .)
    *               reduce using rule 13 (expression -> expression / expression .)
    /               reduce using rule 13 (expression -> expression / expression .)
    IDENTIFIER      reduce using rule 13 (expression -> expression / expression .)
    IF              reduce using rule 13 (expression -> expression / expression .)
    $end            reduce using rule 13 (expression -> expression / expression .)
    }               reduce using rule 13 (expression -> expression / expression .)
    )               reduce using rule 13 (expression -> expression / expression .)

  ! GT              [ shift and go to state 12 ]
  ! LT              [ shift and go to state 13 ]
  ! GE              [ shift and go to state 14 ]
  ! LE              [ shift and go to state 15 ]
  ! EQ              [ shift and go to state 16 ]
  ! NE              [ shift and go to state 17 ]
  ! +               [ shift and go to state 18 ]
  ! -               [ shift and go to state 19 ]
  ! *               [ shift and go to state 20 ]
  ! /               [ shift and go to state 21 ]


state 33

    (14) statement -> IF ( expression ) { . program }
    (15) statement -> IF ( expression ) { . program } ELSE { program }
    (1) program -> . statement
    (2) program -> . program statement
    (9) statement -> . IDENTIFIER ASSIGN expression
    (14) statement -> . IF ( expression ) { program }
    (15) statement -> . IF ( expression ) { program } ELSE { program }

    IDENTIFIER      shift and go to state 3
    IF              shift and go to state 4

    program                        shift and go to state 34
    statement                      shift and go to state 2

state 34

    (14) statement -> IF ( expression ) { program . }
    (15) statement -> IF ( expression ) { program . } ELSE { program }
    (2) program -> program . statement
    (9) statement -> . IDENTIFIER ASSIGN expression
    (14) statement -> . IF ( expression ) { program }
    (15) statement -> . IF ( expression ) { program } ELSE { program }

    }               shift and go to state 35
    IDENTIFIER      shift and go to state 3
    IF              shift and go to state 4

    statement                      shift and go to state 5

state 35

    (14) statement -> IF ( expression ) { program } .
    (15) statement -> IF ( expression ) { program } . ELSE { program }

    IDENTIFIER      reduce using rule 14 (statement -> IF ( expression ) { program } .)
    IF              reduce using rule 14 (statement -> IF ( expression ) { program } .)
    $end            reduce using rule 14 (statement -> IF ( expression ) { program } .)
    }               reduce using rule 14 (statement -> IF ( expression ) { program } .)
    ELSE            shift and go to state 36


state 36

    (15) statement -> IF ( expression ) { program } ELSE . { program }

    {               shift and go to state 37


state 37

    (15) statement -> IF ( expression ) { program } ELSE { . program }
    (1) program -> . statement
    (2) program -> . program statement
    (9) statement -> . IDENTIFIER ASSIGN expression
    (14) statement -> . IF ( expression ) { program }
    (15) statement -> . IF ( expression ) { program } ELSE { program }

    IDENTIFIER      shift and go to state 3
    IF              shift and go to state 4

    program                        shift and go to state 38
    statement                      shift and go to state 2

state 38

    (15) statement -> IF ( expression ) { program } ELSE { program . }
    (2) program -> program . statement
    (9) statement -> . IDENTIFIER ASSIGN expression
    (14) statement -> . IF ( expression ) { program }
    (15) statement -> . IF ( expression ) { program } ELSE { program }

    }               shift and go to state 39
    IDENTIFIER      shift and go to state 3
    IF              shift and go to state 4

    statement                      shift and go to state 5

state 39

    (15) statement -> IF ( expression ) { program } ELSE { program } .

    IDENTIFIER      reduce using rule 15 (statement -> IF ( expression ) { program } ELSE { program } .)
    IF              reduce using rule 15 (statement -> IF ( expression ) { program } ELSE { program } .)
    $end            reduce using rule 15 (statement -> IF ( expression ) { program } ELSE { program } .)
    }               reduce using rule 15 (statement -> IF ( expression ) { program } ELSE { program } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for GT in state 23 resolved as shift
WARNING: shift/reduce conflict for LT in state 23 resolved as shift
WARNING: shift/reduce conflict for GE in state 23 resolved as shift
WARNING: shift/reduce conflict for LE in state 23 resolved as shift
WARNING: shift/reduce conflict for EQ in state 23 resolved as shift
WARNING: shift/reduce conflict for NE in state 23 resolved as shift
WARNING: shift/reduce conflict for + in state 23 resolved as shift
WARNING: shift/reduce conflict for - in state 23 resolved as shift
WARNING: shift/reduce conflict for * in state 23 resolved as shift
WARNING: shift/reduce conflict for / in state 23 resolved as shift
WARNING: shift/reduce conflict for GT in state 24 resolved as shift
WARNING: shift/reduce conflict for LT in state 24 resolved as shift
WARNING: shift/reduce conflict for GE in state 24 resolved as shift
WARNING: shift/reduce conflict for LE in state 24 resolved as shift
WARNING: shift/reduce conflict for EQ in state 24 resolved as shift
WARNING: shift/reduce conflict for NE in state 24 resolved as shift
WARNING: shift/reduce conflict for + in state 24 resolved as shift
WARNING: shift/reduce conflict for - in state 24 resolved as shift
WARNING: shift/reduce conflict for * in state 24 resolved as shift
WARNING: shift/reduce conflict for / in state 24 resolved as shift
WARNING: shift/reduce conflict for GT in state 25 resolved as shift
WARNING: shift/reduce conflict for LT in state 25 resolved as shift
WARNING: shift/reduce conflict for GE in state 25 resolved as shift
WARNING: shift/reduce conflict for LE in state 25 resolved as shift
WARNING: shift/reduce conflict for EQ in state 25 resolved as shift
WARNING: shift/reduce conflict for NE in state 25 resolved as shift
WARNING: shift/reduce conflict for + in state 25 resolved as shift
WARNING: shift/reduce conflict for - in state 25 resolved as shift
WARNING: shift/reduce conflict for * in state 25 resolved as shift
WARNING: shift/reduce conflict for / in state 25 resolved as shift
WARNING: shift/reduce conflict for GT in state 26 resolved as shift
WARNING: shift/reduce conflict for LT in state 26 resolved as shift
WARNING: shift/reduce conflict for GE in state 26 resolved as shift
WARNING: shift/reduce conflict for LE in state 26 resolved as shift
WARNING: shift/reduce conflict for EQ in state 26 resolved as shift
WARNING: shift/reduce conflict for NE in state 26 resolved as shift
WARNING: shift/reduce conflict for + in state 26 resolved as shift
WARNING: shift/reduce conflict for - in state 26 resolved as shift
WARNING: shift/reduce conflict for * in state 26 resolved as shift
WARNING: shift/reduce conflict for / in state 26 resolved as shift
WARNING: shift/reduce conflict for GT in state 27 resolved as shift
WARNING: shift/reduce conflict for LT in state 27 resolved as shift
WARNING: shift/reduce conflict for GE in state 27 resolved as shift
WARNING: shift/reduce conflict for LE in state 27 resolved as shift
WARNING: shift/reduce conflict for EQ in state 27 resolved as shift
WARNING: shift/reduce conflict for NE in state 27 resolved as shift
WARNING: shift/reduce conflict for + in state 27 resolved as shift
WARNING: shift/reduce conflict for - in state 27 resolved as shift
WARNING: shift/reduce conflict for * in state 27 resolved as shift
WARNING: shift/reduce conflict for / in state 27 resolved as shift
WARNING: shift/reduce conflict for GT in state 28 resolved as shift
WARNING: shift/reduce conflict for LT in state 28 resolved as shift
WARNING: shift/reduce conflict for GE in state 28 resolved as shift
WARNING: shift/reduce conflict for LE in state 28 resolved as shift
WARNING: shift/reduce conflict for EQ in state 28 resolved as shift
WARNING: shift/reduce conflict for NE in state 28 resolved as shift
WARNING: shift/reduce conflict for + in state 28 resolved as shift
WARNING: shift/reduce conflict for - in state 28 resolved as shift
WARNING: shift/reduce conflict for * in state 28 resolved as shift
WARNING: shift/reduce conflict for / in state 28 resolved as shift
